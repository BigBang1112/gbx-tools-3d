@page "/view"
@using GBX.NET
@using GBX.NET.Engines.Game
@using GBX.NET.Engines.GameData
@using GBX.NET.Engines.Plug
@using GBX.NET.Exceptions
@using System.IO.Compression
@rendermode InteractiveWebAssembly

@inject GbxService GbxService
@inject NavigationManager NavManager

<PageTitle>View - 3D Gbx Tools</PageTitle>

<section class="content">
    <div class="container">
        <h2>View any 3D content from any Nadeo game. It's real.</h2>

        <UploadArea OnUpload="(args) => OnUploadAsync(args, null)" Height="200" FontSize="125"></UploadArea>

        <h3 class="supported">Supported 3D content types:</h3>

        <div class="view-types">
            @foreach (var viewType in viewTypes)
            {
                <div class="view-type">
                    <a href="view/@viewType.Link" class="view-link"></a>
                    <h3>@viewType.Name</h3>
                    <ul>
                        @foreach (var point in viewType.Points)
                        {
                            <li>@point</li>
                        }
                    </ul>
                    <UploadArea OnUpload="(args) => OnUploadAsync(args, viewType.Link)" Extensions="@viewType.Extensions" FontSize="100"></UploadArea>
                </div>
            }
        </div>
    </div>
</section>

@code {
    private static ViewType[] viewTypes =
    [
        new ViewType(
    Name: "Replay",
    Points: [
    "See the replay almost instantly and anywhere",
                "Checkpoints and inputs that you cannot see in MediaTracker",
                "Drifts, speed, brakes, and other vehicle parameters"
    ],
    Link: "replay",
    Extensions: ["Replay.Gbx"]),
        new ViewType(
            Name: "Map",
            Points: [
                "See how the map actually looks like",
                "No need to rely on thumbnails anymore",
                "Look into various map parameters in context"
            ],
            Link: "map",
            Extensions: ["Challenge.Gbx", "Map.Gbx"]),
        new ViewType(
            Name: "Item",
            Points: [
                "See the item in a real shape without relying on icons or screenshots",
                "Find out their mesh parameters or the placement metadata"
            ],
            Link: "item",
            Extensions: ["Item.Gbx", "Block.Gbx"]),
        new ViewType(
            Name: "Ghost",
            Points: [
                "Only have a Ghost.Gbx? Put it here and import the map additionally",
                "Same experience as with Replay viewing"
            ],
            Link: "ghost",
            Extensions: ["Ghost.Gbx"]),
        new ViewType(
            Name: "Skin",
            Points: [
                "Check out the skins before you equip them",
                "Open doors or bonnets, if you wish so"
            ],
            Link: "skin",
            Extensions: ["zip"]),
        new ViewType(
            Name: "Mesh",
            Points: [
                "If you only have the mesh piece in Gbx format",
                "Similar overview to Item viewing"
            ],
            Link: "mesh",
            Extensions: ["Mesh.Gbx", "Solid.Gbx", "Solid2.Gbx", "Prefab.Gbx"]),
    ];

    private async Task OnUploadAsync(UploadEventArgs e, string? type)
    {
        try
        {
            await using var ms = new MemoryStream(e.Data);
            var gbx = await Gbx.ParseAsync(ms);

            switch (gbx)
            {
                case Gbx<CGameCtnChallenge> map:
                    if (type is not null && type != "map") return;
                    NavManager.NavigateTo("/view/map");
                    break;
                case Gbx<CGameCtnReplayRecord> replay:
                    if (type is not null && type != "replay") return;
                    NavManager.NavigateTo("/view/replay");
                    break;
                case Gbx<CGameCtnGhost> ghost:
                    if (type is not null && type != "ghost") return;
                    NavManager.NavigateTo("/view/ghost");
                    break;
                case Gbx<CGameItemModel> item:
                    if (type is not null && type != "item") return;
                    NavManager.NavigateTo("/view/item");
                    break;
                case Gbx<CPlugSolid>:
                case Gbx<CPlugSolid2Model>:
                case Gbx<CPlugPrefab>:
                    if (type is not null && type != "mesh") return;
                    NavManager.NavigateTo("/view/mesh");
                    break;
                default:
                    return;
            }

            GbxService.Add(gbx);
        }
        catch (NotAGbxException)
        {
            var ms = new MemoryStream(e.Data);
            var zip = new ZipArchive(ms);
            NavManager.NavigateTo("/view/skin");
            GbxService.Add(zip);
        }
    }
}
