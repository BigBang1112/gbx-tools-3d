@page "/view"
@using GBX.NET
@using GBX.NET.Engines.Game
@using GBX.NET.Engines.GameData
@using GBX.NET.Engines.Plug
@using GBX.NET.Exceptions
@using System.IO.Compression
@rendermode InteractiveWebAssembly

@inject GbxService GbxService
@inject NavigationManager NavManager

<PageTitle>View - 3D Gbx Tools</PageTitle>

<section class="content">
    <div class="container">
        <h2>View any 3D content from any Nadeo game. It's real.</h2>

        <UploadArea OnUpload="(args) => OnUploadAsync(args, null)" Height="200" FontSize="125"></UploadArea>

        <h3 class="supported">Supported 3D content types:</h3>

        <div class="view-types">
            @foreach (View3dType viewType in Enum.GetValues(typeof(View3dType)))
            {
                var metadata = viewType.GetMetadata();
                <div class="view-type">
                    <a href="view/@metadata.Link" class="view-link"></a>
                    <h3>@metadata.Name</h3>
                    <ul>
                        @foreach (var point in metadata.Points)
                        {
                            <li>@point</li>
                        }
                    </ul>
                    <UploadArea OnUpload="(args) => OnUploadAsync(args, viewType)" Extensions="@metadata.Extensions" FontSize="100"></UploadArea>
                </div>
            }
        </div>
    </div>
</section>

@code {
    private async Task OnUploadAsync(UploadEventArgs e, View3dType? type)
    {
        try
        {
            await using var ms = new MemoryStream(e.Data);
            var gbx = await Gbx.ParseAsync(ms);

            switch (gbx)
            {
                case Gbx<CGameCtnChallenge> map:
                    if (type is not null && type != View3dType.Map) return;
                    NavManager.NavigateTo("/view/map");
                    break;
                case Gbx<CGameCtnReplayRecord> replay:
                    if (type is not null && type != View3dType.Replay) return;
                    NavManager.NavigateTo("/view/replay");
                    break;
                case Gbx<CGameCtnGhost> ghost:
                    if (type is not null && type != View3dType.Ghost) return;
                    NavManager.NavigateTo("/view/ghost");
                    break;
                case Gbx<CGameItemModel> item:
                    if (type is not null && type != View3dType.Item) return;
                    NavManager.NavigateTo("/view/item");
                    break;
                case Gbx<CPlugSolid>:
                case Gbx<CPlugSolid2Model>:
                case Gbx<CPlugPrefab>:
                    if (type is not null && type != View3dType.Mesh) return;
                    NavManager.NavigateTo("/view/mesh");
                    break;
                default:
                    return;
            }

            GbxService.Add(gbx);
        }
        catch (NotAGbxException)
        {
            var ms = new MemoryStream(e.Data);
            var zip = new ZipArchive(ms);
            NavManager.NavigateTo("/view/skin");
            GbxService.Add(zip);
        }
    }
}
