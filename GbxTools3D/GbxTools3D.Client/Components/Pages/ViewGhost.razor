@page "/view/ghost"
@rendermode InteractiveWebAssembly
@implements IAsyncDisposable

@using GBX.NET
@using GBX.NET.Engines.Game

@inject HttpClient Http
@inject GbxService GbxService

<PageTitle>View ghost - 3D Gbx Tools</PageTitle>

@if (IsDragAndDrop && ghost is null)
{
    <div class="container">
        <div class="navbar-fake-margin"></div>
        <h2 class="view">View a ghost</h2>
        <UploadArea OnUpload="OnUploadAsync" Extensions="extensions" FontSize="150" Height="400"></UploadArea>
        <div class="view-external">
            <EditForm Model="@this" class="view-form">
                <DataAnnotationsValidator />
                <label for="external-select">External:</label>
                <InputSelect id="external-select" @bind-Value="selectedExternal">
                    <option value="tmio">TM.IO</option>
                    <option value="url">URL</option>
                </InputSelect>
                <button type="submit">Load</button>
            </EditForm>
        </div>
    </div>
}
else
{
    <View3D GameVersion="GameVersion.TMF" @ref="view3d"></View3D>
}

@code {
    private View3D? view3d;

    private string[] extensions = ["Ghost.Gbx"];

    [SupplyParameterFromQuery(Name = "type")]
    private string? Type { get; set; }

    public bool IsDragAndDrop => string.IsNullOrEmpty(Type);

    private CGameCtnGhost? ghost;

    private string selectedExternal = "tmio";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (!RendererInfo.IsInteractive)
        {
            return;
        }

        if (IsDragAndDrop)
        {
            return;
        }

        string endpoint;
        if (!string.IsNullOrEmpty(Type))
        {
            endpoint = $"/api/ghost/{Type}";
        }
        else
        {
            throw new Exception();
        }

        using var response = await Http.GetAsync(endpoint);
        var content = await response.Content.ReadFromJsonAsync(AppClientJsonContext.Default.ReplayContentDto);

        if (content is null)
        {
            return;
        }

        await using var ms = new MemoryStream(content.Content);
        ghost = Gbx.ParseNode<CGameCtnGhost>(ms);
    }

    private async Task OnUploadAsync(UploadEventArgs e)
    {
        using var ms = new MemoryStream(e.Data);
        var gbx = await Gbx.ParseAsync(ms);

        if (gbx is Gbx<CGameCtnGhost> ghost)
        {
            GbxService.Add(ghost);
            this.ghost = ghost.Node;
        }
    }

    public ValueTask DisposeAsync()
    {
        GbxService.Deselect(); // can be more flexible

        return ValueTask.CompletedTask;
    }
}