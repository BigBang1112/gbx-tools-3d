@page "/view/map"
@rendermode InteractiveWebAssembly
@implements IAsyncDisposable

@using GBX.NET
@using GBX.NET.Engines.Game

@inject HttpClient Http
@inject GbxService GbxService

<PageTitle>View map - 3D Gbx Tools</PageTitle>

@if (IsDragAndDrop && map is null)
{
    <div class="container">
        <br />
        <UploadArea OnUpload="OnUploadAsync" FontSize="125"></UploadArea>
    </div>
}
else
{
    <View3D GameVersion="GameVersion.TMF" Map="map" @ref="view3d"></View3D>
}

@code {
    private View3D? view3d;

    [SupplyParameterFromQuery(Name = "tmx")]
    private string? TmxSite { get; set; }

    [SupplyParameterFromQuery(Name = "mx")]
    private string? MxSite { get; set; }

    [SupplyParameterFromQuery(Name = "id")]
    private string? MapId { get; set; }

    public bool IsDragAndDrop => string.IsNullOrEmpty(TmxSite) && string.IsNullOrEmpty(MxSite);

    private CGameCtnChallenge? map;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (!RendererInfo.IsInteractive)
        {
            return;
        }

        if (IsDragAndDrop)
        {
            map = GbxService.SelectedMap?.Node;

            if (map is not null)
            {
                await TryLoadMapAsync();
            }

            return;
        }

        string endpoint;
        if (!string.IsNullOrEmpty(TmxSite))
        {
            endpoint = $"/api/map/tmx/{TmxSite}/{MapId}";
        }
        else if (!string.IsNullOrEmpty(MxSite))
        {
            endpoint = $"/api/map/mx/{MxSite}/{MapId}";
        }
        else
        {
            throw new Exception();
        }

        using var response = await Http.GetAsync(endpoint);
        var content = await response.Content.ReadFromJsonAsync<MapContentDto>(AppClientJsonContext.Default.MapContentDto);

        if (content is null)
        {
            return;
        }

        await using var ms = new MemoryStream(content.Content);
        map = Gbx.ParseNode<CGameCtnChallenge>(ms);

        await TryLoadMapAsync();
    }

    private async Task OnUploadAsync(UploadEventArgs e)
    {
        using var ms = new MemoryStream(e.Data);
        var gbx = await Gbx.ParseAsync(ms);

        if (gbx is Gbx<CGameCtnChallenge> map)
        {
            GbxService.Add(map);
            this.map = map.Node;
            await TryLoadMapAsync();
        }
    }

    private async ValueTask<bool> TryLoadMapAsync()
    {
        if (view3d is null)
        {
            return false;
        }

        return await view3d.TryLoadMapAsync();
    }

    public ValueTask DisposeAsync()
    {
        GbxService.Deselect(); // can be more flexible

        return ValueTask.CompletedTask;
    }
}