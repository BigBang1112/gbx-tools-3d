@page "/view/replay"
@rendermode InteractiveWebAssembly
@implements IAsyncDisposable

@using GBX.NET
@using GBX.NET.Engines.Game
@using GbxTools3D.Client.Modules
@using System.Runtime.InteropServices.JavaScript

@inject HttpClient Http
@inject GbxService GbxService

<PageTitle>View replay - 3D Gbx Tools</PageTitle>

@if (IsDragAndDrop && Replay is null)
{
    <div class="container">
        <div class="navbar-fake-margin"></div>
        <h2 class="view">View a replay</h2>
        <UploadArea OnUpload="OnUploadAsync" Extensions="extensions" FontSize="150" Height="400"></UploadArea>
        <div class="view-external">
            <EditForm Model="@this" class="view-form">
                <DataAnnotationsValidator />
                <label for="external-select">External:</label>
                <InputSelect id="external-select" @bind-Value="selectedExternal">
                    <option value="tmx">TMX</option>
                    <option value="mx">MX</option>
                    <option value="tmio">TM.IO</option>
                    <option value="url">URL</option>
                </InputSelect>
                @switch (selectedExternal)
                {
                    case "tmx":
                        <InputSelect @bind-Value="selectedTmx">
                            <option value="tmnf">TMNF</option>
                            <option value="tmuf">TMUF</option>
                            <option value="nations">Nations</option>
                            <option value="sunrise">Sunrise</option>
                            <option value="original">Original</option>
                        </InputSelect>
                        break;
                    case "mx":
                        <InputSelect @bind-Value="selectedMx">
                            <option value="tm2020">TM2020</option>
                            <option value="tm2">TM2</option>
                            <option value="sm">SM</option>
                        </InputSelect>
                        break;

                }
                @switch (selectedExternal)
                {
                    case "tmx":
                    case "mx":
                        <InputText class="text" @bind-Value="externalId" placeholder="ID" style="width: 60px" />
                        break;
                }
                <button type="submit" class="button-generic">Load</button>
            </EditForm>
        </div>
    </div>
}
else
{
    <View3D GameVersion="GameVersion.TMF" Map="Replay?.Challenge" BeforeMapLoad="BeforeMapLoadAsync" @ref="view3d"></View3D>
    @if (RendererInfo.IsInteractive)
    {
        <div class="player">
            <div class="progress"><div class="progress-value" style="width: 0%"></div></div>
            <div class="controls">
                <button class="button-control" @onclick="Play">
                    @if (isPlaying && !isPaused)
                    {
                        <img src="icons/pause.svg" width="48" height="48" />
                    }
                    else
                    {
                        <img src="icons/play.svg" width="48" height="48" />
                    }
                </button>
                <button class="button-control">
                    <img src="icons/skip_previous.svg" width="48" height="48" />
                </button>
                <span>0:00.000 / 1:00.000</span>
            </div>
        </div>
    }
}

@code {
    private View3D? view3d;

    private JSObject? action;
    private bool isPlaying;
    private bool isPaused;

    private string[] extensions = ["Replay.Gbx"];

    [SupplyParameterFromQuery(Name = "tmx")]
    private string? TmxSite { get; set; }

    [SupplyParameterFromQuery(Name = "mx")]
    private string? MxSite { get; set; }

    [SupplyParameterFromQuery(Name = "id")]
    private string? MapId { get; set; }

    public bool IsDragAndDrop => string.IsNullOrEmpty(TmxSite) && string.IsNullOrEmpty(MxSite);

    public CGameCtnReplayRecord? Replay { get; set; }

    private string selectedExternal = "tmx";
    private string selectedTmx = "tmnf";
    private string selectedMx = "tm2020";
    private string externalId = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if (!RendererInfo.IsInteractive)
        {
            return;
        }

        if (IsDragAndDrop)
        {
            Replay = GbxService.SelectedReplay?.Node;
            return;
        }

        string endpoint;
        if (!string.IsNullOrEmpty(TmxSite))
        {
            endpoint = $"/api/replay/tmx/{TmxSite}/{MapId}";
        }
        else if (!string.IsNullOrEmpty(MxSite))
        {
            endpoint = $"/api/replay/mx/{MxSite}/{MapId}";
        }
        else
        {
            throw new Exception();
        }

        using var response = await Http.GetAsync(endpoint);
        var content = await response.Content.ReadFromJsonAsync(AppClientJsonContext.Default.ReplayContentDto);

        if (content is null)
        {
            return;
        }

        await using var ms = new MemoryStream(content.Content);
        Replay = Gbx.ParseNode<CGameCtnReplayRecord>(ms);
    }

    private async Task OnUploadAsync(UploadEventArgs e)
    {
        await using var ms = new MemoryStream(e.Data);
        var gbx = await Gbx.ParseAsync(ms);

        if (gbx is Gbx<CGameCtnReplayRecord> replay)
        {
            GbxService.Add(replay);
            Replay = replay.Node;
        }
    }

    private async Task BeforeMapLoadAsync()
    {
        await TryLoadReplayAsync();
    }

    private async ValueTask<bool> TryLoadReplayAsync()
    {
        if (view3d is null || Replay is null)
        {
            return false;
        }

        var ghost = Replay.GetGhosts().FirstOrDefault();

        if (ghost is null)
        {
            return false;
        }

        if (ghost.SampleData is null)
        {
            return false;
        }

        var ghostSolid = await view3d.LoadGhostAsync(ghost);

        if (ghostSolid is null)
        {
            return false;
        }

        var firstSample = ghost.SampleData.Samples.FirstOrDefault();

        if (firstSample is null)
        {
            return false;
        }

        ghostSolid.Position = firstSample.Position;
        ghostSolid.RotationQuaternion = firstSample.Rotation;

        var times = new double[ghost.SampleData.Samples.Count];
        var positions = new double[ghost.SampleData.Samples.Count * 3];
        var rotations = new double[ghost.SampleData.Samples.Count * 4];

        for (var i = 0; i < ghost.SampleData.Samples.Count; i++)
        {
            var sample = ghost.SampleData.Samples[i];
            times[i] = sample.Time.TotalSeconds;
            positions[i * 3] = sample.Position.X;
            positions[i * 3 + 1] = sample.Position.Y;
            positions[i * 3 + 2] = sample.Position.Z;
            rotations[i * 4] = sample.Rotation.X;
            rotations[i * 4 + 1] = sample.Rotation.Y;
            rotations[i * 4 + 2] = sample.Rotation.Z;
            rotations[i * 4 + 3] = sample.Rotation.W;
        }

        var positionTrack = Animation.CreatePositionTrack(times, positions);
        var rotationTrack = Animation.CreateQuaternionTrack(times, rotations);

        var clip = Animation.CreateClip("Vehicle", times.Last(), [positionTrack, rotationTrack]);

        Animation.CreateMixer(ghostSolid.Object);
        action = Animation.CreateAction(clip);

        return true;
    }

    public ValueTask DisposeAsync()
    {
        GbxService.Deselect(); // can be more flexible

        return ValueTask.CompletedTask;
    }

    private void Play()
    {
        if (action is null)
        {
            return;
        }

        if (!isPlaying)
        {
            isPlaying = true;
            Animation.PlayAction(action);
            return;
        }

        isPaused = !isPaused;

        if (isPaused)
        {
            Animation.PauseAction(action);
        }
        else
        {
            Animation.ResumeAction(action);
        }
    }
}