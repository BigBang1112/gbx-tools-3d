@page "/catalog/{GameVersion?}/{ContentType?}/{CollectionName?}/{AssetType?}"
@using GBX.NET
@implements IAsyncDisposable
@rendermode InteractiveWebAssembly

@inject HttpClient Http
@inject IJSRuntime JS
@inject ICollectionClientService CollectionClientService
@inject IBlockClientService BlockClientService
@inject IDecorationClientService DecorationClientService
@inject IVehicleClientService VehicleClientService

<PageTitle>Catalog - 3D Gbx Tools</PageTitle>

<div class="@(RendererInfo.IsInteractive ? "black-background" : "black-background-fade")">

    @if (!RendererInfo.IsInteractive)
    {
        <div class="centered">
            <Loader></Loader>
        </div>
    }

    @if (AssetName is not null)
    {
        <View3D GameVersion="GameVersionEnum"
                CollectionName="@CollectionName" 
                BlockName="@(ContentTypeEnum == Enums.ContentType.Collection && AssetTypeEnum == Enums.AssetType.Block ? AssetName : null)"
                VehicleName="@(ContentTypeEnum == Enums.ContentType.Vehicle ? AssetName : null)"
                @ref="view3d"></View3D>
    }

</div>

@if (!NoCatalog)
{
    <div class="catalog @(showCatalog ? "" : "closed")">
        <div class="opener" @onclick="() => showCatalog = !showCatalog">
            @if (showCatalog)
            {
                <img src="icons/keyboard_arrow_left.svg" width="32" height="32" />
            }
            else
            {
                <img src="icons/keyboard_arrow_right.svg" width="32" height="32" />
            }
        </div>
        <div class="games">
            <NavLink href="/catalog/TMSX"><img src="icons/TMS.webp" alt="TMSX" width="48" height="48" /></NavLink>
            <NavLink href="/catalog/TMNESWC"><img src="icons/TMNESWC.webp" alt="TMNESWC" width="48" height="48" /></NavLink>
            <NavLink href="/catalog/TMF"><img src="icons/TMUF.webp" alt="TMUF" width="48" height="48" /></NavLink>
            <NavLink href="/catalog/TMT"><img src="icons/TMT.webp" alt="TMT" width="48" height="48" /></NavLink>
            <NavLink href="/catalog/MP4"><img src="icons/MP4.webp" alt="MP4" width="48" height="48" /></NavLink>
            <NavLink href="/catalog/TM2020"><img src="icons/TM2020.webp" alt="TM2020" width="48" height="48" /></NavLink>
        </div>

        @if (GameVersionEnum != GBX.NET.GameVersion.Unspecified)
        {
            <div class="asset-types">
                <NavLink href="@($"/catalog/{GameVersionEnum}/collections")" class="button-generic">Environments</NavLink>
                <NavLink href="@($"/catalog/{GameVersionEnum}/vehicles")" class="button-generic">Vehicles</NavLink>
            </div>
        }

        @if (ContentTypeEnum == Enums.ContentType.Collection)
        {
            <div class="collections">
                @foreach (var collection in CollectionClientService.Collections)
                {
                    <NavLink href="@($"/catalog/{GameVersionEnum}/collections/{collection.Name}{(GetAssetTypeString() is string str ? $"/{str}" : "")}")"><img src="@($"api/icon/{GameVersionEnum}/collection/{collection.Name}/environment")" width="48" height="48" />@(collection.DisplayName ?? collection.Name)</NavLink>
                }
            </div>

            @if (SelectedCollection is not null)
            {
                <div class="asset-types">
                    @if (SelectedCollection.HasBlocks)
                    {
                        <NavLink href="@($"/catalog/{GameVersionEnum}/collections/{SelectedCollection.Name}/blocks")" class="button-generic">Blocks</NavLink>
                    }

                    @if (SelectedCollection.HasDecorations)
                    {
                        <NavLink href="@($"/catalog/{GameVersionEnum}/collections/{SelectedCollection.Name}/decorations")" class="button-generic">Decorations</NavLink>
                    }

                    @if (SelectedCollection.HasItems)
                    {
                        <NavLink href="@($"/catalog/{GameVersionEnum}/collections/{SelectedCollection.Name}/items")" class="button-generic">Items</NavLink>
                    }
                </div>

                @if (AssetTypeEnum != Enums.AssetType.None)
                {
                    <div class="assets">
                        @if (AssetTypeEnum == Enums.AssetType.Block)
                        {
                            <Virtualize ItemsProvider="(req) => FilterAssets(BlockClientService.Blocks, x => x.Name, req)" Context="block" @ref="blocksVirtualize">
                                <NavLink href="@($"/catalog/{GameVersionEnum}/collections/{CollectionName}/blocks?selected={block.Name}")">
                                    @if (block.HasIcon)
                                    {
                                        <img src="@($"api/icon/{GameVersionEnum}/collection/{SelectedCollection.Name}/block/{block.Name}")" width="24" height="24" />
                                    }
                                    else
                                    {
                                        <img src="icons/noicon.webp" width="24" height="24" />
                                    }
                                    @block.Name
                                </NavLink>
                            </Virtualize>
                        }

                        @if (AssetTypeEnum == Enums.AssetType.Decoration)
                        {
                            @foreach (var decoration in DecorationClientService.DecorationSizes)
                            {
                                <NavLink href="@($"/catalog/{GameVersionEnum}/collections/{CollectionName}/decorations?selected={decoration.Size.X}x{decoration.Size.Y}x{decoration.Size.Z}")">@decoration.Size</NavLink>
                            }
                        }
                    </div>
                }
            }
        }

        @if (ContentTypeEnum == Enums.ContentType.Vehicle)
        {
            <div class="assets">
                <Virtualize ItemsProvider="(req) => FilterAssets(VehicleClientService.Vehicles, x => x.Name, req)" Context="vehicle" @ref="vehiclesVirtualize">
                    <NavLink href="@($"/catalog/{GameVersionEnum}/vehicles?selected={vehicle.Name}")">
                        @if (vehicle.HasIcon)
                        {
                            <img src="@($"api/icon/{GameVersionEnum}/vehicle/{vehicle.Name}")" width="24" height="24" />
                        }
                        else
                        {
                            <img src="icons/noicon.webp" width="24" height="24" />
                        }
                        @vehicle.Name
                    </NavLink>
                </Virtualize>
            </div>
        }

        @if ((ContentTypeEnum == Enums.ContentType.Collection && AssetTypeEnum == Enums.AssetType.Block && SelectedCollection is not null) || ContentTypeEnum == Enums.ContentType.Vehicle)
        {
            <InputText type="text" @bind-Value="AssetSearchValue" @oninput="OnAssetSearchInput" placeholder="Search..." />
        }
    </div>
}

@code {
    private View3D? view3d;

    private Virtualize<BlockInfoDto>? blocksVirtualize;
    private Virtualize<VehicleDto>? vehiclesVirtualize;
    private IJSObjectReference? module;

    private bool showCatalog = true;

    [Parameter]
    public string? GameVersion { get; set; }

    [Parameter]
    public string? ContentType { get; set; }

    [Parameter]
    public string? CollectionName { get; set; }

    [Parameter]
    public string? AssetType { get; set; }

    [SupplyParameterFromQuery(Name = "selected")]
    private string? AssetName { get; set; }

    [SupplyParameterFromQuery(Name = "nocatalog")]
    private bool NoCatalog { get; set; }

    public GameVersion GameVersionEnum { get; set; }
    public ContentType ContentTypeEnum { get; set; }
    public AssetType AssetTypeEnum { get; set; }

    public CollectionDto? SelectedCollection => ContentTypeEnum == Enums.ContentType.Collection
        ? CollectionClientService.Collections?.FirstOrDefault(c => c.Name == CollectionName) : null;

    private string assetSearchValue = "";

    public string AssetSearchValue
    {
        get => assetSearchValue;
        set
        {
            if (assetSearchValue == value)
            {
                return;
            }

            assetSearchValue = value;

            blocksVirtualize?.RefreshDataAsync();
            vehiclesVirtualize?.RefreshDataAsync();
        }
    }

    private void OnAssetSearchInput(ChangeEventArgs e)
    {
        AssetSearchValue = e.Value?.ToString() ?? "";
    }

    private ValueTask<ItemsProviderResult<T>> FilterAssets<T>(List<T> allAssets, Func<T, string> filterBy, ItemsProviderRequest request)
    {
        var filteredAssets = allAssets.Where(b => filterBy(b).Contains(AssetSearchValue, StringComparison.OrdinalIgnoreCase));

        var totalCount = filteredAssets.Count();
        var assets = filteredAssets
            .Skip(request.StartIndex)
            .Take(request.Count)
            .ToList();

        return ValueTask.FromResult(new ItemsProviderResult<T>(assets, totalCount));
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import", $"./Components/Pages/Catalog.razor.js");
            //await module.InvokeVoidAsync("addHandlers", assets);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Enum.TryParse(GameVersion, true, out GameVersion gameVersion))
        {
            GameVersionEnum = gameVersion;
        }
        else
        {
            GameVersionEnum = GBX.NET.GameVersion.Unspecified;
        }

        ContentTypeEnum = ContentType?.ToLowerInvariant() switch
        {
            "collections" => Enums.ContentType.Collection,
            "vehicles" => Enums.ContentType.Vehicle,
            _ => Enums.ContentType.None
        };

        AssetTypeEnum = AssetType?.ToLowerInvariant() switch
        {
            "blocks" => Enums.AssetType.Block,
            "decorations" => Enums.AssetType.Decoration,
            "items" => Enums.AssetType.Item,
            "macroblocks" => Enums.AssetType.Macroblock,
            _ => Enums.AssetType.Block
        };

        await FetchInfoAsync();
    }

    private async Task FetchInfoAsync(CancellationToken cancellationToken = default)
    {
        if (GameVersionEnum == GBX.NET.GameVersion.Unspecified)
        {
            return;
        }

        await CollectionClientService.FetchAllAsync(GameVersionEnum, cancellationToken);

        if (AssetTypeEnum == Enums.AssetType.None)
        {
            return;
        }

        if (ContentTypeEnum == Enums.ContentType.Collection && CollectionName is not null)
        {
            switch (AssetTypeEnum)
            {
                case Enums.AssetType.Block:
                    await BlockClientService.FetchAllAsync(GameVersionEnum, CollectionName, cancellationToken);
                    if (blocksVirtualize is not null)
                    {
                        await blocksVirtualize.RefreshDataAsync();
                    }
                    break;
                case Enums.AssetType.Decoration:
                    await DecorationClientService.FetchAllAsync(GameVersionEnum, CollectionName, cancellationToken);
                    break;
            }
        }

        if (ContentTypeEnum == Enums.ContentType.Vehicle)
        {
            await VehicleClientService.FetchAllAsync(GameVersionEnum, cancellationToken);
            if (vehiclesVirtualize is not null)
            {
                await vehiclesVirtualize.RefreshDataAsync();
            }
        }
    }

    private string? GetAssetTypeString()
    {
        return AssetTypeEnum switch
        {
            Enums.AssetType.Block => "blocks",
            Enums.AssetType.Decoration => "decorations",
            Enums.AssetType.Item => "items",
            Enums.AssetType.Macroblock => "macroblocks",
            _ => null
        };
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (module is not null)
        {
            try
            {
                await module.DisposeAsync();
            }
            catch (JSDisconnectedException)
            {
            }
        }
    }
}
