@page "/catalog/{GameVersion?}/{ContentType?}/{CollectionName?}/{AssetType?}"
@using GBX.NET
@implements IAsyncDisposable
@rendermode InteractiveWebAssembly

@inject HttpClient Http
@inject IJSRuntime JS
@inject ICollectionClientService CollectionClientService
@inject IBlockClientService BlockClientService
@inject IDecorationClientService DecorationClientService
@inject IVehicleClientService VehicleClientService

@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<PageTitle>Catalog - 3D Gbx Tools</PageTitle>

<div class="@(RendererInfo.IsInteractive ? "black-background" : "black-background-fade")" @onclick="DisableSelectMode">

    @if (!RendererInfo.IsInteractive)
    {
        <div class="centered">
            <Loader></Loader>
        </div>
    }

    @if (AssetName is not null)
    {
        <View3D GameVersion="GameVersionEnum"
                CollectionName="@CollectionName"
                BlockName="@(ContentTypeEnum == Enums.ContentType.Collection && AssetTypeEnum == Enums.AssetType.Block ? AssetName : null)"
                DecorationName="@(ContentTypeEnum == Enums.ContentType.Collection && AssetTypeEnum == Enums.AssetType.Decoration ? AssetName : null)"
                SceneName="@(ContentTypeEnum == Enums.ContentType.Collection && AssetTypeEnum == Enums.AssetType.Decoration ? SceneName : null)"
                VehicleName="@(ContentTypeEnum == Enums.ContentType.Vehicle ? AssetName : null)"
                OnFocusedSolidsChange="() => {}"
                IsCatalog="true"
                @ref="view3d"></View3D>
    }

</div>

@if (!NoCatalog)
{
    <div class="panels big left">
        <div class="panel left catalog @(showCatalog ? "" : "closed")">
            <div class="opener" @onclick="ToggleCatalogAsync">
                @if (showCatalog)
                {
                    <img src="icons/ui/keyboard_arrow_left.svg" width="32" height="32" />
                }
                else
                {
                    <img src="icons/ui/keyboard_arrow_right.svg" width="32" height="32" />
                }
            </div>
            <div class="games">
                <NavLink href="@($"/catalog/TMSX{(ContentType is null ? "" : $"/{ContentType.ToLowerInvariant()}")}")"><img src="icons/game/TMS.webp" alt="TMSX" width="48" height="48" /></NavLink>
                <NavLink href="@($"/catalog/TMNESWC{(ContentType is null ? "" : $"/{ContentType.ToLowerInvariant()}")}")"><img src="icons/game/TMNESWC.webp" alt="TMNESWC" width="48" height="48" /></NavLink>
                <NavLink href="@($"/catalog/TMF{(ContentType is null ? "" : $"/{ContentType.ToLowerInvariant()}")}")"><img src="icons/game/TMUF.webp" alt="TMUF" width="48" height="48" /></NavLink>
                <NavLink href="@($"/catalog/TMT{(ContentType is null ? "" : $"/{ContentType.ToLowerInvariant()}")}")"><img src="icons/game/TMT.webp" alt="TMT" width="48" height="48" /></NavLink>
                <NavLink href="@($"/catalog/MP4{(ContentType is null ? "" : $"/{ContentType.ToLowerInvariant()}")}")"><img src="icons/game/MP4.webp" alt="MP4" width="48" height="48" /></NavLink>
                <NavLink href="@($"/catalog/TM2020{(ContentType is null ? "" : $"/{ContentType.ToLowerInvariant()}")}")"><img src="icons/game/TM2020.webp" alt="TM2020" width="48" height="48" /></NavLink>
            </div>

            @if (GameVersionEnum == GBX.NET.GameVersion.Unspecified)
            {
                <div class="fill">Select a Gbx game...</div>
            }
            else
            {
                <div class="asset-types">
                    <NavLink href="@($"/catalog/{GameVersionEnum}/collections")" class="button-generic">Environments</NavLink>
                    <NavLink href="@($"/catalog/{GameVersionEnum}/vehicles")" class="button-generic">Vehicles</NavLink>
                </div>

                @if (ContentTypeEnum == Enums.ContentType.Collection)
                {
                    <div class="collections">
                        @foreach (var collection in CollectionClientService.Collections)
                        {
                            <NavLink href="@($"/catalog/{GameVersionEnum}/collections/{collection.Name}{(GetAssetTypeString() is string str ? $"/{str}" : "")}")"><img src="@($"api/icon/{GameVersionEnum}/collection/{collection.Name}/environment")" height="48" />@(collection.DisplayName ?? collection.Name)</NavLink>
                        }
                    </div>

                    @if (SelectedCollection is null)
                    {
                        <div class="fill">Select an environment...</div>
                    }
                    else
                    {
                        <div class="asset-types">
                            @if (SelectedCollection.HasBlocks)
                            {
                                <NavLink href="@($"/catalog/{GameVersionEnum}/collections/{SelectedCollection.Name}/blocks")" class="button-generic">Blocks</NavLink>
                            }

                            @if (SelectedCollection.HasDecorations)
                            {
                                <NavLink href="@($"/catalog/{GameVersionEnum}/collections/{SelectedCollection.Name}/decorations")" class="button-generic">Decorations</NavLink>
                            }

                            @if (SelectedCollection.HasItems)
                            {
                                <NavLink href="@($"/catalog/{GameVersionEnum}/collections/{SelectedCollection.Name}/items")" class="button-generic">Items</NavLink>
                            }
                        </div>

                        @if (AssetTypeEnum != Enums.AssetType.None)
                        {
                            <div class="assets">
                                @if (AssetTypeEnum == Enums.AssetType.Block)
                                {
                                    <Virtualize ItemsProvider="(req) => FilterAssets(BlockClientService.Blocks, x => x.Name, req)" Context="block" @ref="blocksVirtualize">
                                        <NavLink href="@($"/catalog/{GameVersionEnum}/collections/{CollectionName}/blocks?selected={block.Name}")">
                                            @if (block.HasIcon)
                                            {
                                                <img src="@($"api/icon/{GameVersionEnum}/collection/{SelectedCollection.Name}/block/{block.Name}")" width="24" height="24" />
                                            }
                                            else
                                            {
                                                <img src="icons/noicon.webp" width="24" height="24" />
                                            }
                                            @block.Name
                                            <span>@TestGetSoundHash(block)</span>
                                        </NavLink>
                                    </Virtualize>
                                }

                                @if (AssetTypeEnum == Enums.AssetType.Decoration)
                                {
                                    @foreach (var decorationGroup in DecorationClientService.DecorationSizes.GroupBy(x => x.Size))
                                    {
                                        var hasSingle = decorationGroup.Count() == 1;

                                        foreach (var decoration in decorationGroup)
                                        {
                                            var sceneName = decoration.SceneName.Substring(decoration.SceneName.LastIndexOf('\\') + 1);

                                            <NavLink href="@($"/catalog/{GameVersionEnum}/collections/{CollectionName}/decorations?selected={decoration.Size.X}x{decoration.Size.Y}x{decoration.Size.Z}{(hasSingle ? "" : $"&scene={sceneName}")}")">
                                                <span>@decoration.Size</span>
                                                @if (!hasSingle)
                                                {
                                                    <span>(@sceneName)</span>
                                                }
                                            </NavLink>
                                        }
                                    }
                                }
                            </div>
                        }
                    }
                }
                else if (ContentTypeEnum == Enums.ContentType.Vehicle)
                {
                    <div class="assets">
                        <Virtualize ItemsProvider="(req) => FilterAssets(VehicleClientService.Vehicles, x => x.Name, req)" Context="vehicle" @ref="vehiclesVirtualize">
                            <NavLink href="@($"/catalog/{GameVersionEnum}/vehicles?selected={vehicle.Name}")">
                                @if (vehicle.HasIcon)
                                {
                                    <img src="@($"api/icon/{GameVersionEnum}/vehicle/{vehicle.Name}")" width="24" height="24" />
                                }
                                else
                                {
                                    <img src="icons/noicon.webp" width="24" height="24" />
                                }
                                @vehicle.Name
                            </NavLink>
                        </Virtualize>
                    </div>
                }
                else
                {
                    <div class="fill">Select a content type...</div>
                }
            }

            @if ((ContentTypeEnum == Enums.ContentType.Collection && AssetTypeEnum == Enums.AssetType.Block && SelectedCollection is not null) || ContentTypeEnum == Enums.ContentType.Vehicle)
            {
                <InputText type="text" @bind-Value="AssetSearchValue" @oninput="OnAssetSearchInput" placeholder="Search..." />
            }
        </div>
    </div>
    <div class="panels big right">
        <div class="panel right properties @(showProperties ? "" : "closed")">
            <div class="opener" @onclick="TogglePropertiesAsync">
                @if (showProperties)
                {
                    <img src="icons/ui/keyboard_arrow_right.svg" width="32" height="32" />
                }
                else
                {
                    <img src="icons/ui/keyboard_arrow_left.svg" width="32" height="32" />
                }
            </div>
            <div class="asset-name">
                @if (block is not null)
                {
                    <div class="title">
                        @if (block.Name.Length > 60)
                        {
                            <div style="font-size: 70%">@block.Name</div>
                        }
                        else if (block.Name.Length > 45)
                        {
                            <div style="font-size: 90%">@block.Name</div>
                        }
                        else if (block.Name.Length > 30)
                        {
                            <div>@block.Name</div>
                        }
                        else
                        {
                            <div style="font-size: 150%">@block.Name</div>
                        }
                    </div>
                    <div class="minimenu">
                        <div class="button-generic @(!blockIsGround ? "active" : "") @(block.AirVariants.Count > 0 ? "" : "disabled")" @onclick="() => ChangeBlockVariantAsync(isGround: block.AirVariants.Count == 0)">Air</div>
                        <div class="button-generic @(blockIsGround ? "active" : "") @(block.GroundVariants.Count > 0 ? "" : "disabled")" @onclick="() => ChangeBlockVariantAsync(isGround: block.GroundVariants.Count > 0)">Ground</div>
                    </div>

                    var variants = blockIsGround ? block.GroundVariants : block.AirVariants;

                    @if (variants.Count > 1)
                    {
                        <div class="minimenu">
                            @foreach (var variant in variants.GroupBy(x => x.Variant))
                            {
                                <div class="button-generic @(blockVariant == variant.Key ? "active" : "")" @onclick="() => ChangeBlockVariantAsync(variant.First())" title="Variant #@variant.Key">@variant.Key</div>
                            }
                        </div>
                    }

                    @if (variants.Count > 0 && variants.Where(x => x.Variant == blockVariant).Count() > 1)
                    {
                        <div class="minimenu">
                            @foreach (var variant in variants.Where(x => x.Variant == blockVariant))
                            {
                                <div class="button-generic @(blockSubVariant == variant.SubVariant ? "active" : "")" @onclick="() => ChangeBlockVariantAsync(variant)" title="Sub-variant #@variant.SubVariant">@variant.SubVariant</div>
                            }
                        </div>
                    }

                    var currentVariant = variants.FirstOrDefault(x => x.Variant == blockVariant && x.SubVariant == blockSubVariant);

                    @if (currentVariant is not null)
                    {
                        <div class="table">
                            @if (currentVariant.MobilPath is not null)
                            {
                                <div class="label">Mobil:</div>
                                <InputText class="text" @bind-Value="currentVariant.MobilPath" disabled />
                            }
                            <div class="label">Mesh:</div>
                            <InputText class="text" @bind-Value="currentVariant.MeshPath" disabled />
                        </div>
                    }

                    @*
                    @if (block.HasIcon && SelectedCollection is not null)
                    {
                        <img src="@($"api/icon/{GameVersionEnum}/collection/{SelectedCollection.Name}/block/{block.Name}")" width="64" height="64" />
                    }
                    *@
                }
                else if (decoSize is not null)
                {
                    <div class="title">
                        <div style="font-size: 150%;">@decoSize.Size</div>
                    </div>
                }
                else if (ContentTypeEnum == Enums.ContentType.Vehicle)
                {
                    <div class="title">
                        <div style="font-size: 150%;">@AssetName</div>
                    </div>
                }
                else
                {
                    <div class="fill">No asset selected.</div>
                }

                @{
                    var focusedSolids = view3d?.FocusedSolids ?? [];

                    if (currentSolid is null || !focusedSolids.Contains(currentSolid))
                    {
                        currentSolid = focusedSolids.FirstOrDefault();
                    }
                }

                @if (focusedSolids.Count > 0)
                {
                    <ul class="no-bullet tree">
                        @foreach (var solid in focusedSolids)
                        {
                            <ObjectTreeElement Object="solid.Object"
                                               SelectedObject="selectedTreeObject"
                                               OnSelected="OnSelectedTreeObjectChanged"
                                               Description="@Path.GetFileName(solid.Object.GetPropertyAsJSObject("userData")?.GetPropertyAsString("filePath"))"
                                               OnClick="() => currentSolid = solid"></ObjectTreeElement>
                        }
                    </ul>
                    <div class="tree-info">
                        @if (selectedTreeObject is not null)
                        {
                            var hasMaterial = false;

                            <div class="tree-name"><b>@selectedTreeObject.GetPropertyAsString("name")</b></div>

                            @foreach (var child in Solid.GetChildren(selectedTreeObject))
                            {
                                if (child.GetPropertyAsBoolean("isMesh"))
                                {
                                    var material = child.GetPropertyAsJSObject("material");

                                    @if (material is not null)
                                    {
                                        hasMaterial = true;

                                        var materialNameRaw = material.GetPropertyAsString("name");
                                        var materialName = materialNameRaw?.Replace('\\', '/');
                                        var shaderName = material.GetPropertyAsJSObject("userData")?.GetPropertyAsString("shaderName")?.Replace('\\', '/');

                                        <div class="table">
                                            <div class="label">Material:</div>
                                            <InputText class="text" @bind-Value="materialName" disabled />
                                            @if (shaderName is not null)
                                            {
                                                <div class="label">Shader:</div>
                                                <InputText class="text" @bind-Value="shaderName" disabled />
                                            }
                                        </div>
                                        <div class="textures">
                                            @if (materialNameRaw is not null && view3d?.Materials.TryGetValue(materialNameRaw, out var materialDto) == true && materialDto.Textures is not null)
                                            {
                                                foreach (var (textureName, texturePath) in materialDto.Textures)
                                                {
                                                    var hash = $"GbxTools3D|Texture|{GameVersionEnum}|{texturePath}|PeopleOnTheBusLikeDMCA".Hash();

                                                    <div>
                                                        <div class="texture-name">@textureName</div>
                                                        <img class="texture-image" src="api/texture/@hash" height="64" title="@texturePath" />
                                                    </div>
                                                }
                                            } 
                                        </div>
                                    }
                                }
                            }

                            @if (!hasMaterial)
                            {
                                <div class="no-material">No material found.</div>
                            }
                        }
                    </div>

                    @if (currentSolid is not null)
                    {
                        <div class="current-solid-name">
                            @Path.GetFileName(currentSolid.Object.GetPropertyAsJSObject("userData")?.GetPropertyAsString("filePath"))
                        </div>
                    }

                    <div class="solid-tools">
                        <div class="button-generic @(selectMode ? "active" : "")" @onclick="ToggleSelectMode" title="Select mode">
                            <img src="icons/ui/ads_click.svg" alt="Select mode" class="icon" width="32" height="32" />
                        </div>
                        <div class="button-generic @(showGrid ? "active" : "")" @onclick="ToggleGrid" title="Grid">
                            <img src="icons/ui/grid_4x4.svg" alt="Grid" class="icon" width="32" height="32" />
                        </div>

                        @if (currentSolid is not null)
                        {
                            <div class="button-generic @(currentSolid.WireframeEnabled ? "active" : "")" @onclick="() => currentSolid.ToggleWireframe()" title="Wireframe">
                                <img src="icons/ui/details.svg" alt="Wireframe" class="icon" width="32" height="32" />
                            </div>
                            <div class="button-generic @(currentSolid.CollisionsEnabled ? "active" : "")" @onclick="() => ToggleCollisionsAsync(currentSolid)" title="Collisions">
                                <img src="icons/ui/minor_crash.svg" alt="Collisions" class="icon" width="32" height="32" />
                            </div>
                            @if (view3d?.Scene is not null)
                            {
                                <div class="button-generic @(currentSolid.VertexNormalHelperEnabled ? "active" : "")" @onclick="() => currentSolid.ToggleVertexNormalHelper(view3d.Scene)" title="Vertex normals">
                                    <img src="icons/ui/merge_type.svg" alt="Vertex normals" class="icon" width="32" height="32" />
                                </div>
                            }
                            @if (decoSize is not null)
                            {
                                <div class="button-generic active" title="Buildable area zone">
                                    <img src="icons/ui/grass.svg" alt="Zone" class="icon" width="32" height="32" />
                                </div>
                            }
                        }
                    </div>
                }
            </div>
        </div>
    </div>
}