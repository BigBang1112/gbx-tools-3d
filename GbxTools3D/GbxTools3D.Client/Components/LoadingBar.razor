@implements IDisposable

@inject StateService StateService
@inject ILogger<LoadingBar> Logger
@inject IJSRuntime Js

<div class="bg @(NoNav ? "" : "shifted")" style="">
    @if (real)
    {
        <div @ref="progressRef" class="progress real" style="width: 0"></div>
    }
    else
    {
        <div class="progress fake"></div>
    }
</div>
<script>
    // doing through js to avoid entire component rerender
    // which allows to make progress smooth 
    window.updateProgress = (elem, progress) => {
        if (elem) {
            elem.style.width = `${progress}%`
        }
    }

    window.removeProgress = (elem) => {
        window.setTimeout(() => {
            elem.remove()
        }, 1000) // timeout to wait for css animation to finish
    }

</script>

@code {
    [Parameter]
    public View3dType ViewType { get; set; }

    [SupplyParameterFromQuery(Name = "nonav")]
    private bool NoNav { get; set; }

    private ElementReference progressRef;

    private double progress = 0f;
    private bool real = false;
    private HashSet<LoadingStageKind> loadingStages = [];
    private int totalWeight;
    private Dictionary<LoadingStageKind, double> tasks = new();


    protected override void OnInitialized()
    {
        loadingStages = [..ViewType.GetMetadata().LoadingStages];
        if (loadingStages.Count == 0) { return; }
        real = true;
        totalWeight = loadingStages.Cast<int>().Sum();
        StateService.OnLoadingDefined += OnLoadingDefined;
        StateService.OnLoadingChanged += OnLoadingChanged;

    }

    private void OnLoadingDefined(LoadingStage message)
    {
        if (!loadingStages.Contains(message.Kind)) { return; }
        if (message.Amount == 0)
        {
            progress += (double)(int)message.Kind / totalWeight;
            UpdateProgress();
            return;
        }
        tasks[message.Kind] = (double)(int)message.Kind / message.Amount / totalWeight;
    }


 private void OnLoadingChanged(LoadingStage message)
    {
        if (!loadingStages.Contains(message.Kind)) { return; }
        var localWeight = tasks[message.Kind] * message.Amount;
        progress += localWeight;
        UpdateProgress();
    }

    private void UpdateProgress()
    {
        Js.InvokeVoidAsync("updateProgress", progressRef, (progress * 100).ToString("0.00", System.Globalization.CultureInfo.InvariantCulture));
        if (Math.Abs(progress - 1) < 0.0001)
        {
            Js.InvokeVoidAsync("removeProgress", progressRef);
        }
    }

    public void Dispose()
    {
        StateService.OnLoadingDefined -= OnLoadingDefined;
        StateService.OnLoadingChanged -= OnLoadingChanged;
    }
}
