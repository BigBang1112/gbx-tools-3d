@using TmEssentials

@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<div class="panel left checkpoint-list @(show ? "" : "closed")">
    <div class="opener" @onclick="ToggleShowAsync">
        @if (show)
        {
            <img src="icons/ui/keyboard_arrow_left.svg" width="32" height="32" />
        }
        else
        {
            <img src="icons/ui/keyboard_arrow_right.svg" width="32" height="32" />
        }
    </div>
    <div class="title">
        Checkpoints
    </div>
    <div class="list mono">
        <Virtualize Items="Checkpoints" Context="checkpointInfo" ItemSize="28">
            @{
                var isLap = (checkpointInfo.Index + 1) % CheckpointsPerLap == 0;
            }

            <div @onclick="() => OnCheckpointClick.InvokeAsync(checkpointInfo.Checkpoint)" class="item checkpoint@(checkpointInfo.IsFinish ? " finish" : "") @(isLap && !checkpointInfo.IsFinish ? "lap" : "") @(CurrentCheckpoint == checkpointInfo.Checkpoint.Time ? "active" : "")">
                <div class="type">
                    @if (checkpointInfo.IsFinish || isLap)
                    {
                        <img src="icons/ui/sports_score.svg" width="20" height="20" />
                    }
                </div>
                <div class="time">
                    @checkpointInfo.Checkpoint.Time.ToTmString(UseHundredths)
                </div>
                <div class="checkpoint-num">
                    (@(checkpointInfo.Index + 1))
                </div>
                <div class="bonus @(checkpointInfo.HasBonusChanged ? "" : "unchanged")" title="@(checkpointInfo.Checkpoint.Speed.HasValue ? "Speed at the checkpoint" : "Stunt points at the checkpoint")">
                    @if (checkpointInfo.Checkpoint.Speed.HasValue)
                    {
                        <span>@checkpointInfo.Checkpoint.Speed.Value</span>
                        <span>km/h</span>
                    }
                    else
                    {
                        <span>@checkpointInfo.Checkpoint.StuntsScore</span>
                        <span>pts.</span>
                    }
                </div>
            </div>
        </Virtualize>
    </div>

    @{
        var cpCount = (Ghost?.Checkpoints?.Length ?? 1) - 1; // Real checkpoint count
    }

    <div class="counters">
        <div class="counter">
            @if (cpCount > 0)
            {
                <span class="mono">@(CurrentCheckpointIndex + 1)</span> <span class="mono">/</span> <span class="mono" title="Actual checkpoint count (not counting the finish)">@cpCount</span>
            }
            else
            {
                <span class="no-laps">No checkpoints</span>
            }
        </div>
        @if (cpCount > 0)
        {
            <div class="counter">
                @if (NumLaps > 1)
                {
                    <img src="icons/ui/laps.svg" width="32" height="32" />
                    <span class="mono">@(CurrentLapIndex + 1) / @NumLaps</span>
                }
                else
                {
                    <span class="no-laps">No laps</span>
                }
            </div>
        }
    </div>
</div>
