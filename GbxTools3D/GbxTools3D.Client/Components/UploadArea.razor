@implements IAsyncDisposable
@inject IJSRuntime JS

<div class="upload-area @(dragged ? "drag" : "")" style="@(Height.HasValue ? $"height: {Height.Value}px" : ""); font-size: @(FontSize)%;">
    @if (RendererInfo.IsInteractive)
    {
        @if (uploadFileName is null)
        {
            <span>Drag & Drop 
                @if (Extensions?.Length > 0)
                {
                    @foreach (var ext in Extensions)
                    {
                        if (ext != Extensions[0])
                        {
                            <span>/</span>
                        }
                        <span class="ext @(ext.EndsWith("Gbx") ? "gbx" : "other")">@ext</span>
                    }
                }
                else
                {
                    <span>any</span>
                }
                file here...</span>
            <span class="note">or click to upload</span>
        }
        else
        {
            <span>@uploadFileName</span>
        }
        
        <input @ref="inputFile"
            @ondragenter="DragEnter"
            @ondragleave="DragEnd"
            @ondragend="DragEnd"
            @ondrop="DragEnd" type="file" class="file" accept="@(Extensions is null ? "" : string.Join(',', Extensions.Select(x => "." + x)))" />
    }
    else
    {
        <Loader></Loader>
    }
</div>

@code {
    private ElementReference inputFile;
    private IJSObjectReference? module;
    private DotNetObjectReference<UploadArea>? objRef;

    private bool dragged;
    private string? uploadFileName;

    [Parameter]
    public int? Height { get; set; } = 100;

    [Parameter]
    public int FontSize { get; set; } = 100;

    /// <summary>
    /// Extensions without the dot.
    /// </summary>
    [Parameter]
    public required string[]? Extensions { get; set; }

    [Parameter]
    public EventCallback<UploadEventArgs> OnUpload { get; set; }

    protected override void OnInitialized() =>
        objRef = DotNetObjectReference.Create(this);

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import", $"./Components/UploadArea.razor.js");
            await module.InvokeVoidAsync("addHandlers", inputFile, objRef);
        }
    }

    [JSInvokable]
    public async Task UploadAsync(string fileName, byte[] data)
    {
        await OnUpload.InvokeAsync(new UploadEventArgs(fileName, data));
    }

    public void SetUploadFileName(string fileName)
    {
        uploadFileName = fileName;
    }

    [JSInvokable]
    public void ClearUploadFileName()
    {
        uploadFileName = null;
    }

    private void DragEnter(DragEventArgs e)
    {
        dragged = true;
    }

    private void DragEnd()
    {
        dragged = false;
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (module is not null)
        {
            try
            {
                await module.DisposeAsync();
            }
            catch (JSDisconnectedException)
            {
            }
        }
    }
}
