@using TmEssentials
@implements IAsyncDisposable
@inject IJSRuntime JS

<div class="player">
    <div class="progress" @ref="progress" @onmouseleave="() => PreviewTime = null">
        @if (PreviewTime.HasValue)
        {
            <div class="time-preview-mark" style="left: @(((double)PreviewTime.Value.Ticks / Duration.Ticks * 100).ToString("0.00", System.Globalization.CultureInfo.InvariantCulture))%">
                <div class="time-preview mono">@PreviewTime.ToTmString()</div>
            </div>
        }
        @if (Markers.Count <= 100)
        {
            @foreach (var marker in Markers)
            {
                <div class="chevron @marker.Type.ToString().ToLowerInvariant()"
                style="left: @(((double)marker.Time.Ticks / Duration.Ticks * 100).ToString("0.00", System.Globalization.CultureInfo.InvariantCulture))%"
                @onmousedown="() => OnMarkerMouseDown(marker)" @onmouseup="EndSeekAsync">
                    @switch (marker.Type)
                    {
                        case PlaybackMarkerType.Finish:
                        case PlaybackMarkerType.Multilap:
                            <img src="icons/sports_score.svg" width="24" height="24" />
                            break;
                    }
                </div>
            }
        }
       <div class="progress-value" style="width: @((CurrentTime.TotalSeconds / Duration.TotalSeconds * 100).ToString("0.00", System.Globalization.CultureInfo.InvariantCulture))%"></div>
   </div>
   <div class="controls">
       <button class="button-control" @onclick="PlayAsync">
           @if (IsPlaying && !IsPaused)
           {
               <img src="icons/pause.svg" width="48" height="48" />
           }
           else
           {
               <img src="icons/play.svg" width="48" height="48" />
           }
       </button>
       <button class="button-control" @onclick="RewindAsync">
           <img src="icons/skip_previous.svg" width="48" height="48" />
       </button>
       <span class="mono"><b>@CurrentTime.ToTmString()</b> <small>/ @Duration.ToTmString()</small></span>
       <input type="range" min="1" max="15" value="8" class="slider" @oninput="SpeedChange" @onchange="SpeedChange" />
   </div>
</div>
